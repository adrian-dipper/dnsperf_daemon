# Nginx Configuration Example for DNS Performance Daemon REST API
#
# This is an EXAMPLE configuration that demonstrates how to serve the JSON output 
# from the DNS performance daemon as a REST API endpoint for Home Assistant integration.
#
# This example shows how to:
# - Expose the daemon's JSON data via HTTP/HTTPS
# - Create REST endpoints that Home Assistant can consume
# - Handle error cases gracefully
# - Provide additional API endpoints for monitoring
#
# You can adapt this configuration to your specific setup or use alternative
# methods to serve the JSON data (e.g., Python Flask, Node.js, Apache, etc.)
#
# Installation (if using nginx):
# 1. Copy this file to /etc/nginx/sites-available/dnsperf-api
# 2. Create symlink: ln -s /etc/nginx/sites-available/dnsperf-api /etc/nginx/sites-enabled/
# 3. Test config: nginx -t
# 4. Reload nginx: systemctl reload nginx
#
# The API will be available at: http://your-server/api/dns-latency
# Use this URL in your Home Assistant REST sensor configuration

server {
    listen 80;
    server_name your-server.local;  # Replace with your actual server name/IP
    
    # Optional: Add basic security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    
    # Log configuration
    access_log /var/log/nginx/dnsperf-api.access.log;
    error_log /var/log/nginx/dnsperf-api.error.log;
    
    # API endpoint for DNS performance data
    location /api/dns-latency {
        # Set content type to JSON
        add_header Content-Type application/json;
        add_header Access-Control-Allow-Origin *;  # CORS for web clients
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma no-cache;
        add_header Expires 0;
        
        # Serve the JSON file created by the daemon
        # Adjust path to match your DAEMON_WORKDIR from the config
        alias /var/lib/dnsperf_daemon/latest_result.txt;
        
        # Handle missing file gracefully
        try_files $uri @error_response;
    }
    
    # Fallback for when the JSON file doesn't exist
    location @error_response {
        add_header Content-Type application/json;
        return 503 '{"error": true, "message": "DNS performance data not available", "timestamp": ""}';
    }
    
    # Optional: API endpoint for historical data
    location /api/dns-latency/history {
        add_header Content-Type text/plain;
        add_header Access-Control-Allow-Origin *;
        
        # Serve the history file
        alias /var/lib/dnsperf_daemon/dns_perf_history.txt;
        
        try_files $uri @history_error;
    }
    
    location @history_error {
        add_header Content-Type application/json;
        return 404 '{"error": true, "message": "DNS performance history not available"}';
    }
    
    # Optional: Health check endpoint
    location /api/dns-latency/health {
        add_header Content-Type application/json;
        
        # Check if daemon is running by looking for PID file
        try_files /var/run/dnsperf_daemon.pid @daemon_down;
        
        # If PID file exists, return OK
        return 200 '{"status": "ok", "daemon": "running"}';
    }
    
    location @daemon_down {
        add_header Content-Type application/json;
        return 503 '{"status": "error", "daemon": "stopped", "message": "DNS performance daemon is not running"}';
    }
    
    # Optional: Configuration info endpoint
    location /api/dns-latency/config {
        add_header Content-Type application/json;
        
        # Return basic config info (create this with a simple script)
        alias /var/lib/dnsperf_daemon/config_info.json;
        
        try_files $uri @config_error;
    }
    
    location @config_error {
        add_header Content-Type application/json;
        return 404 '{"error": true, "message": "Configuration info not available"}';
    }
    
    # Block access to other files in the daemon directory
    location /var/lib/dnsperf_daemon/ {
        deny all;
        return 403;
    }
    
    # Optional: Basic API documentation
    location /api/dns-latency/docs {
        add_header Content-Type text/html;
        return 200 '<!DOCTYPE html>
<html>
<head>
    <title>DNS Performance API</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        code { background: #f4f4f4; padding: 2px 4px; border-radius: 3px; }
        pre { background: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }
    </style>
</head>
<body>
    <h1>DNS Performance API Documentation</h1>
    
    <h2>Endpoints</h2>
    <ul>
        <li><code>GET /api/dns-latency</code> - Current DNS performance metrics (JSON)</li>
        <li><code>GET /api/dns-latency/history</code> - Historical data (CSV format)</li>
        <li><code>GET /api/dns-latency/health</code> - Daemon health status</li>
        <li><code>GET /api/dns-latency/config</code> - Configuration information</li>
    </ul>
    
    <h2>Example Response</h2>
    <pre>{
  "timestamp": "2025-01-22T10:30:00Z",
  "latency": {
    "average": 45.2,
    "minimum": 12.3,
    "maximum": 89.1
  },
  "dnsperf_metrics": {
    "queries_sent": 2000,
    "queries_completed": 1970,
    "queries_lost": 30,
    "queries_per_second_achieved": 131.33,
    "runtime_seconds": 15.02,
    "success_rate_percent": 98.50
  },
  "test_config": {
    "dns_server": "1.1.1.1",
    "total_hosts": 1000,
    "static_hosts": 2,
    "dynamic_hosts": 998,
    "total_queries_generated": 2000,
    "max_outstanding_queries": 20
  }
}</pre>
    
    <h2>Home Assistant Integration</h2>
    <p>Use the main endpoint <code>/api/dns-latency</code> with REST sensors in Home Assistant.</p>
    <p>See the homeassistant_templates.yaml file for complete configuration examples.</p>
</body>
</html>';
    }
    
    # Root redirect to documentation
    location = / {
        return 301 /api/dns-latency/docs;
    }
    
    # Handle favicon requests
    location = /favicon.ico {
        log_not_found off;
        access_log off;
        return 204;
    }
}

# Optional: HTTPS configuration
# Uncomment and configure SSL certificates for production use
#
# server {
#     listen 443 ssl http2;
#     server_name your-server.local;
#     
#     ssl_certificate /path/to/your/certificate.crt;
#     ssl_certificate_key /path/to/your/private.key;
#     
#     # Modern SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     
#     # Include all the location blocks from the HTTP server above
#     include /etc/nginx/sites-available/dnsperf-api-locations.conf;
# }
#
# # Redirect HTTP to HTTPS
# server {
#     listen 80;
#     server_name your-server.local;
#     return 301 https://$server_name$request_uri;
# }
